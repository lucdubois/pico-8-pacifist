pico-8 cartridge // http://www.pico-8.com
version 32
__lua__

function _init()
    xmod=0
    ymod=0
    offset = 0
    shaking = false
    shake_timer=10
    score=0
    multiplier=1
    highscore=0
    lives=3
    gtms=0
    message='the pacifist'
    messageTimer=180
    bombs=1
    bombInUse=false
    bombTimer=60
    bombScale = 1
    bombRechargeT=0
    justDied=0
    powerUps={
        moreGates=0,
        bigGates=0
    }
    difficulty=0 --0 to 1
    score2 = {0, 0, 0}
    highscore2 = {0, 0, 0}
    music(0)
end

function _update60()
        updateAfterDeathTimer()
        updatePStuff()
        updateBgModifiers()
    if (bombInUse) then
        manageActiveBomb()
    else 
        updateBombRechargeTime()
        if (btn(4)) then -- z button (bomb)
            useBomb()
        end
        if (p.dead == true and bombInUse == false) then
            playerDied()
        end

        updateShakeTimer()
        updateBombTimer()
        
        spawnStuff()

        foreach(fieldpus, managePUCollision)
        foreach(gates, manageGate)
        foreach(enemies, manageEnemy)
        
        moveParticles()
    end
end

function _draw()
    screen_shake()
    cls()
    palt(0, true)
    drawMatrix()
    drawHUD()
    foreach(fieldpus, drawFieldPU)
    foreach(gates, drawGateCircle)
    foreach(gates, drawGate)
    foreach(enemies, drawEnemy)
    foreach(particles, drawParticle)
    spr_r(lives-1, p.x-4, p.y-4, p.angle, 1, 1) --draw player
    drawBombBar()
    drawMessage()
end

function newRound() 
    enemies = {}
    gates = {}
    offset = 0
    shaking = false
    shake_timer=10
    multiplier=1
    p = Player:new{}
    lives -=1
end

function resetGame() 
    newRound()
    lives=3
    gtms = 0
    score=0
    score2 = {0, 0, 0}
    music(0)
    messageTimer=120
    message='try again'
    bombs=1
    bombInUse=false
    bombTimer=60
    bombScale = 1
    bombRechargeT=0
    powerUps={
        moreGates=0,
        bigGates=0
    }
    fieldpus = {}
end

function spawnStuff()
    gtms+=1
    local gt = gtms/60

    if (gt % 3 == 0) then
        local en = EasyE:new{}
        spawnEnemy(en)
    elseif (gt >=40 and gt % 1.5 == 0) then
        local en = EasyE:new{}
        spawnEnemy(en)
    elseif (gt >=60 and gt*10 % 8 == 0) then
        local en = EasyE:new{}
        spawnEnemy(en)
    elseif (gt >=80 and gt*10 % 5 == 0) then
        local en = EasyE:new{}
        spawnEnemy(en)
    end
    if (gt > 15 and gt % 6 == 0) then
        local en = MediumE:new{}
        spawnEnemy(en)
    elseif (gt > 50 and gt % 2 == 0) then
        local en = MediumE:new{}
        spawnEnemy(en)
    elseif (gt > 100 and gt % 1 == 0) then
        local en = MediumE:new{}
        spawnEnemy(en)
    end
    if (gt > 120 and gt % 8 == 0) then
        local en = FastE:new{}
        spawnEnemy(en)
    elseif (gt > 30 and gt % 16 == 0) then
        local en = FastE:new{}
        spawnEnemy(en)
    end

    -- if gt % 2 == 0 then
    --     local pu = BigGatesPU:new{}
    --     pu:spawn()
    --     add(fieldpus, pu)
    -- end

    if (gt % (5-powerUps.moreGates) == 0) then
        newGate()
    end
end

function enemyCanSpawn(en)
    if (en.x < 2) then en.x = 2 end
    if (en.y < 2) then en.y = 2 end
    if (en.x > 126) then en.x = 126 end
    if (en.y > 126) then en.y = 126 end
    if getDist(en.x, en.y, p.x, p.y) < 42 then return false end

    local pa = p.angle-90%360
    local angle1 = (pa-30)/360
    local angle2 = (pa+30)/360
    local x1 = (sin(angle1)*100)+p.x
    local y1 = (cos(angle1)*100)+p.y
    local x2 = (sin(angle2)*100)+p.x
    local y2 = (cos(angle2)*100)+p.y
    if getTriPointCollision(x1, y1, x2, y2, p.x, p.y, en.x, en.y) == true then return false end
    return true
end

function spawnEnemy(en)
    repeat
        local angle = rnd()
        en.x = ((rnd(20)+42)*sin(angle))+p.x
        en.y = ((rnd(20)+42)*cos(angle))+p.y
    until enemyCanSpawn(en) == true
    add(enemies, en)
end

function newGate()
    local gate = MovingGate:new{}
    local bigGatesPU = powerUps.bigGates*2
    gate.angle = rnd(0.5)+0.5;
    local s = sin(gate.angle);
    gate.cx = rnd(116);
    gate.cy = rnd(116);
    gate.dx = rnd(gate.max_dx)
    gate.dy = rnd(gate.max_dy)
    gate.dangle = rnd(0.012)-0.006
    add(gates, gate)
end

function adjustScoreDistribution()
    if (score2[1] > 999) then 
        score2[2]+= flr(score2[1]/1000)
        score2[1] = score2[1]%1000
    end
    if (score2[2] > 999) then 
        score2[3]+= flr(score2[2]/1000)
        score2[2] = score2[2]%1000
    end
end

function adjustHighscore()
    if score2[3] > highscore2[3] then 
        updateHighscore()
    elseif score2[3] == highscore2[3] and score2[2] > highscore2[2] then
        updateHighscore()
    elseif score2[3] == highscore2[3] and score2[2] == highscore2[2] and score2[1] > highscore2[1] then
        updateHighscore()
    end

end

function updateHighscore()
    highscore2[3] = score2[3]
    highscore2[2] = score2[2]
    highscore2[1] = score2[1]
end

function updatePStuff()
    p.dx*=p.friction
    p.dy*=p.friction
    local angle = p.angle%360
    if (btn(0)) then 
        p.dx-=p.acc
        spawnTrail(p, 4)
        if angle > 180 then p.angle-=10 end
        if angle < 180 then p.angle+=10 end
    end -- left
    if (btn(1)) then 
        p.dx+=p.acc
        spawnTrail(p, 4)
        if angle != 0 then
            if angle > 180 then p.angle+=10 end
            if angle <= 180 then p.angle-=10 end
        end
    end -- right
    if (btn(2)) then 
        p.dy-=p.acc
        spawnTrail(p, 4)
        if ((angle <= 90 and angle >= 0) or angle > 270 ) then p.angle-=10 end
        if ((angle > 90 and angle <= 180) or (angle < 270 and angle >180)) then p.angle+=10 end
    end -- up
    if (btn(3)) then 
        p.dy+=p.acc
        spawnTrail(p, 4)
        if ((angle < 90 and angle >= 0) or angle > 270 ) then p.angle+=10 end
        if (angle > 90 or (angle < 270 and angle >=180)) then p.angle-=10 end
    end -- down
    p.dx=mid(-p.max_dx,p.dx,p.max_dx)
    p.dy=mid(-p.max_dy,p.dy,p.max_dy)
    p.x+=p.dx
    p.y+=p.dy
    if (p.x>124) then p.x=124 end
    if (p.x<4) then p.x=4 end
    if (p.y>124) then p.y=124 end
    if (p.y<4) then p.y=4 end
end

function spawnTrail(o, r)
    local ang = rnd()
    local px = sin(ang)*r
    local py = cos(ang)*r
    local particle = Particle:new{
        max_frames=5,
        x = o.x+px,
        y = o.y+py,
        color = o.color
    }
    add(particles, particle)
end

function updateBgModifiers()
    xmod = (p.x-60)/6
    ymod = (p.y-60)/6
end

function updateBombRechargeTime()
    if (bombRechargeT == 0 and bombs == 0) then bombs+=1 end
    if (bombRechargeT >0) then bombRechargeT-=1 end
end

function updateShakeTimer()
    if shake_timer == 0 then
        shaking = false
        shake_timer = 10
        offset=0
    end
    if shaking == true then 
        shake_timer-=1 
        offset=0.1
    end
end

function playerDied()
    addExplosionParticles(40,p.x, p.y, 7, 60, 1, p.dx, p.dy)
    sfx(2)
    shaking = true
    foreach(enemies, killEnemy)
    justDied = 20
    if lives>=2 then 
        newRound()
    else
        resetGame()
    end
end

function updateAfterDeathTimer()
    if justDied > 0 then justDied -= 1 end
end

function updateBombTimer()
    if bombTimer == 0 then 
        bombInUse = false
        bombTimer = 60
    end
end

function managePUCollision(pu)
    if (pu.x-xmod < p.x and 15+pu.x-xmod > p.x and pu.y-ymod < p.y and 15+pu.y-ymod > p.y) then
        pu.catch()
        del(fieldpus, pu)
    end
end

function manageGate(gate) 
    gate:move()
    if (getPointCircleCollision(gate.x1, gate.y1, p.x, p.y, 2) or getPointCircleCollision(gate.x2, gate.y2, p.x, p.y, 2) ) then 
        p.dx = p.dx*-1
        p.dy = p.dy*-1
    elseif (isTouchingPlayer(gate.x1, gate.y1, gate.x2, gate.y2, p.x, p.y)) then
        local enemiesKilled = 0
        for enemy in all(enemies) do
            if (getPointCircleCollision(enemy.x, enemy.y, gate.cx, gate.cy, 40+(powerUps.bigGates*3)) == true) then
                score2[1]+=(enemy.points*multiplier)%1000
                score2[2]+=flr((enemy.points*multiplier)/1000)
                adjustScoreDistribution()
                score+=enemy.points*multiplier
                killEnemy(enemy)
                enemiesKilled+=1
            end
        end
        adjustHighscore()
        shaking = true
        if enemiesKilled == 0 then sfx(0) else sfx(1) end
        addExplosionParticles(20, gate.cx, gate.cy, 10, 40, 5, 0, 0)
        del(gates, gate)
        multiplier+=enemiesKilled
        bombRechargeT-=120
    end
end

function manageEnemy(enemy)
    enemy:move()
    if (getPointCircleCollision(enemy.x, enemy.y, p.x, p.y, 2) == true and bombInUse == false) then p.dead = true end --collide with player
end

function killEnemy(e)
    e:die() 
    del(enemies, e)
end

function useBomb()
    if (bombs > 0 and justDied == 0 and bombInUse == false) then
        bombInUse = true
        message='dimensional shift'
        messageTimer=60
        sfx(4, 2)
        bombs-=1
        bombRechargeT=5400
    else
        sfx(12, 2)
    end
end

function manageActiveBomb()
    bombScale = (((cos((bombTimer/120))*32)+32)/8)+1
    bombTimer -= 1
    for e in all(enemies) do
        local ratiox = (e.x/128)/(e.y/128)
        local ratioy = (e.y/128)/(e.x/128)
        e.x*=bombScale
        e.y*=bombScale
        if (e.x > 130 or e.y > 130) then del(enemies, e) end
    end
    for p in all(particles) do
        local ratiox = (p.x/128)/(p.y/128)
        local ratioy = (p.y/128)/(p.x/128)
        p.x*=bombScale
        p.y*=bombScale
        if (p.x > 130 or p.y > 130) then del(particles, p) end
    end
    for g in all(gates) do
        local ratiox = (g.cx/128)/(g.cy/128)
        local ratioy = (g.cy/128)/(g.cx/128)
        g.cx*=bombScale
        g.cy*=bombScale
        g.x1*=bombScale
        g.y1*=bombScale
        g.x2*=bombScale
        g.y2*=bombScale
        if (g.cx > 140 or g.cy > 140) then del(gates, g) end
    end
    if (bombTimer == 0) then 
        bombScale=1
        
        local px = p.x
        local py = p.y
        local pa = p.angle
        p = Player:new{
            x = px,
            y = py,
            angle = pa
        }
        bombInUse = false 
    end
end

function drawGateCircle(gate)
    circ(gate.cx, gate.cy, 40+(powerUps.bigGates*3), 1)
end

function drawGate(gate)
    circfill(gate.x1,gate.y1,1,10)
    circfill(gate.x2,gate.y2,1,10)
    line(gate.x1, gate.y1, gate.x2, gate.y2, 11)
end

function drawEnemy(e)
    e:draw()
end

function drawParticle(part)
    rectfill(part.x, part.y, part.x, part.y, part.color)
    part.frames+=1
end

function drawFieldPU(pu)
    pu:draw()
end

function drawTriangle()
    local pa = p.angle-90%360
    local angle1 = (pa-30)/360
    local angle2 = (pa+30)/360
    local x1 = (sin(angle1)*100)+p.x
    local y1 = (cos(angle1)*100)+p.y
    local x2 = (sin(angle2)*100)+p.x
    local y2 = (cos(angle2)*100)+p.y
    local color = 1
    for en in all(enemies) do
        if getTriPointCollision(x1, y1, x2, y2, p.x, p.y, en.x, en.y) == true then color = 11 end
    end
    line (p.x, p.y, x1, y1, color)
    line (p.x, p.y, x2, y2, color)
    line (x1, y1, x2, y2, color)
end

function drawMatrix()
    rectfill(-20, -20, 148, 148, 0)
    local newMod = 0
    if (bombInUse == true) then
        --if (bombTimer < 40) then
        newMod = ((cos((bombTimer/120))*32)+32)/64
        --end
        for x=0-xmod,128-xmod,16 do
            line(x*newMod, 0*newMod, x*newMod, 160*newMod, 1)
        end
        for y=0-ymod,128-ymod,16 do
            line(0*newMod, y*newMod, 160*newMod, y*newMod, 1)
        end
        xmod = 0
        ymod=0
    end
    for x=-64-xmod,192-xmod,16 do
        line(x*bombScale, -64, x*bombScale, 192, 1)
    end
    for y=-64-ymod,192-ymod,16 do
        line(-64, y*bombScale, 192, y*bombScale, 1)
    end
    line(0, 0, 0, 127, 1)
    line(0, 0, 127, 0, 1)
    line(127, 127, 127, 0, 1)
    line(127, 127, 0, 127, 1)
end

function drawHUD()
    print(getScoreString(score2),
    0,0, 6)
    print('H.SCORE: '..getScoreString(highscore2),
    40,0, 6)
    print(''..multiplier..'x',
        110,0, 6)
end

function getScoreString(sc)
    local ret = '0';
    if (sc[1] > 0 or sc[2] > 0 or sc[3] > 0) then
        local prefix = ''
        if (sc[2] > 0 or sc[3] > 0) and sc[1] < 10 then prefix = '00' elseif (sc[2] > 0 or sc[3] > 0) and sc[1] < 100 then prefix = '0' end
        ret = prefix..sc[1]
        if (sc[2] > 0 and sc[3] > 0) then
            if sc[2] < 10 then prefix = '00' elseif sc[2] < 100 then prefix = '0' else prefix = '' end
            ret = prefix..sc[2]..ret
        elseif (sc[2] > 0 and sc[3] == 0) then ret = sc[2]..ret end
    end
    if (sc[3] > 0) then ret = sc[3]..ret end
    return ret
end

function drawBombBar()
    local bombMeterW = ((5400-bombRechargeT)/5400)*127
    line(0, 127, bombMeterW , 127, 12)
end

function drawMessage()
    if (messageTimer > 0) then
        print(message, 64-#message*2, 61, 11)
        messageTimer -=1
    end
end

Shape = {
    x = 0,
    y = 0,
    dx = 0,
    dy = 0,
    max_dx=2,
    max_dy=2,
    acc = 0,
    friction=0.90
}
MovingGate = {
    x1=0,
    x2=0,
    y1=10,
    y2=0,
    cx=0,
    cy=0,
    angle=0,
    exploding=false,
    max_dx=0.3,
    max_dy=0.3,
    dangle=0;
}
Particle = {
    x=0,
    y=0,
    dx = 0,
    dy = 0,
    max_frames=30,
    friction=0.70,
    color=10,
    frames = 0
}
PowerUp = {
    x=0,
    y=0,
    time=600
}

function PowerUp:new (o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
end
function Particle:new (o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
end
function MovingGate:new (o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
end
function Shape:new (o)
    o = o or {}
    setmetatable(o, self)
    self.__index = self
    return o
end

MoreGatesPU = PowerUp:new{
    sprite=20
}
BigGatesPU = PowerUp:new{
    sprite=21
}
Player = Shape:new{
    sprite = 0,
    x=64,
    y=64,
    max_dx=3,
    max_dy=3,
    acc = 0.15,
    angle = 0,
    dead = false,
    color = 6
}
EasyE = Shape:new{
    x=60,
    y=60,
    max_dx=3,
    max_dy=3,
    acc = 0.10,
    friction=0.80,
    color=9,
    points=2
}
MediumE = Shape:new{
    x=60,
    y=60,
    max_dx=3,
    max_dy=3,
    acc = 0.12,
    friction=0.88,
    color=8,
    points=3
}
FastE = Shape:new{
    x=60,
    y=60,
    max_dx=15,
    max_dy=15,
    acc = 0.05,
    friction=0.78,
    color=14,
    colors={14, 7},
    timer=180,
    activeTime=60,
    angle=0,
    points=10,
    signaling=false,
    cr=0,
    crd=0.5
}

function PowerUp:spawn()
    self.x = flr(rnd(8))*16
    self.y = flr(rnd(8))*16
end

function PowerUp:draw()
    rectfill(self.x-xmod, self.y-ymod, 15+self.x-xmod, 15+self.y-ymod, 1)
    spr(self.sprite, 4+self.x-xmod, 4+self.y-ymod)
end

function MoreGatesPU:catch()
    powerUps.moreGates+=1
end

function BigGatesPU:catch()
    powerUps.bigGates+=1
end

function Shape:draw() 
    circfill(self.x,self.y,2,self.color)
end
function FastE:draw() 
    if (self.signaling == true) then
        circ(self.x, self.y, self.cr, 7)
    end
    circfill(self.x,self.y,2,self.color)
end

function MovingGate:move()
    self.cx+=self.dx
    self.cy+=self.dy
    self.angle+=self.dangle
    if (self.angle>=1) then self.angle-=1 end
    local gateSin = sin(self.angle)
    local gateCos = cos(self.angle)
    self.x1 = self.cx+((10+(powerUps.bigGates*3))*gateSin);
    self.x2 = self.cx+((-10-(powerUps.bigGates*3))*gateSin);
    self.y1 = self.cy+((10+(powerUps.bigGates*3))*gateCos);
    self.y2 = self.cy+((-10-(powerUps.bigGates*3))*gateCos);
    
    if (self.cx>120 or self.cx<0) then self.dx*=-1 end
    if (self.cy>120 or self.cy<0) then self.dy*=-1 end
end

function Shape:move()
    local diffx =  self.x - p.x
    local diffy = self.y - p.y
    local angle = atan2(diffx, diffy*-1)
    self.dx += self.acc*(cos(angle)*-1)
    self.dy += self.acc*sin(angle)
    self.dx*=self.friction
    self.dy*=self.friction
    self.x+=self.dx
    self.y+=self.dy
    if (self.x>126) then self.x=126 end
    if (self.x<2) then self.x=2 end
    if (self.y>126) then self.y=126 end
    if (self.y<2) then self.y=2 end
end

function Shape:die() addExplosionParticles(20, self.x, self.y, self.color, 20, 3, self.dx, self.dy) end

function FastE:manageRipple()

    if (self.cr <=7 and self.signaling == true) then
        self.cr+=self.crd
    elseif (self.cr >7 and self.signaling == true) then
        self.cr = 0
        self.signaling = false
    end
        
end

function FastE:move()
    self.timer+=-1
    if self.signaling == true then
        self:manageRipple()
    end
    if ((self.timer >= 60 and self.timer%30 == 0) or (self.timer < 60 and self.timer >= 0 and self.timer%15 == 0)) then
        if (self.colors[1] == self.color) then 
            self.color = self.colors[2] 
            self.signaling = true
            sfx(3, 1)
        else self.color = self.colors[1] end
    end
    if (self.timer <= 0 and self.timer >= self.activeTime*-1) then
        local diffx =  self.x - p.x
        local diffy = self.y - p.y
        self.angle = atan2(diffx, diffy*-1)
        self.dx += self.acc*cos(self.angle)*-10
        self.dy += self.acc*sin(self.angle)*10
        self.dx*=self.friction
        self.dy*=self.friction
    
        self.x+=self.dx
        self.y+=self.dy
        
        if (self.x>126) then self.x=126 end
        if (self.x<2) then self.x=2 end
        if (self.y>126) then self.y=126 end
        if (self.y<2) then self.y=2 end
    elseif (self.timer < self.activeTime*-1) then
        self.timer = 180
    end
end

-- helper
function screen_shake()
    local fade = 0.95
    local offset_x=16-rnd(32)
    local offset_y=16-rnd(32)
    offset_x*=offset
    offset_y*=offset
    
    camera(offset_x,offset_y)
    offset*=fade
    if offset<0.05 then
      offset=0
    end
end

function getDist(x1, y1, x2, y2)
    local distx = x1 - x2
    local disty = y1 - y2
    return sqrt((distx*distx) + (disty*disty))
end

function getPointCircleCollision(px, py, cx, cy, r)
    local dist = getDist(px, py, cx, cy)
    if (dist <= r) then return true end
    return false
end

function getLinePointCollision(x1, y1, x2, y2, px, py)
    local d1 = getDist(px, py, x1, y1)
    local d2 = getDist(px, py, x2, y2)
    local lineLen = getDist(x1, y1, x2, y2)
    local buffer = 0.1

    if (d1+d2 >= lineLen-buffer and d1+d2 <= lineLen+buffer) then return true end
    return false
end

function getTriPointCollision(x1, y1, x2, y2, x3, y3, px, py)
    local areaOrig = abs( (x2-x1)*(y3-y1)-(x3-x1)*(y2-y1))
    local area1 =    abs( (x1-px)*(y2-py)-(x2-px)*(y1-py))
    local area2 =    abs( (x2-px)*(y3-py)-(x3-px)*(y2-py))
    local area3 =    abs( (x3-px)*(y1-py)-(x1-px)*(y3-py))
    if (flr(area1 + area2 + area3) == flr(areaOrig)) then
        return true;
    end
    return false;
end

function isTouchingPlayer(gateX1, gateY1, gateX2, gateY2, playerX, playerY)
    -- if (getPointCircleCollision(gateX1, gateY1, playerX, playerY, 3) or getPointCircleCollision(gateX2, gateY2, playerX, playerY, 3) ) then return true end
    local len = getDist(gateX1, gateY1, gateX2, gateY2)
    local dot = (((playerX-gateX1)*(gateX2-gateX1)) + ((playerY-gateY1)*(gateY2-gateY1))) / (len^2)
    local closestX = gateX1 + (dot * (gateX2-gateX1))
    local closestY = gateY1 + (dot * (gateY2-gateY1))
    local onSegment = getLinePointCollision(gateX1, gateY1, gateX2, gateY2, closestX, closestY)
    if (onSegment != true) then return false end

    local distance = getDist(closestX, closestY, playerX, playerY)

    if (distance <= 2) then return true end
    return false
end

function easeinoutquad(t)
    if(t<.5) then
        return t*t*2
    else
        t-=1
        return 1-t*t*2
    end
end

function tan(a) return sin(a)/cos(a) end

function addExplosionParticles(n, x, y, c, duration, speed, dxMod, dyMod)
    for i=1,n,1 do
        local dx = rnd(speed*2)-(speed)+dxMod
        local dy = rnd(speed*2)-(speed)+dyMod
        local particle = Particle:new{x=x, y=y, dx = dx, dy = dy, color = c, max_frames= duration}
        add(particles, particle)
    end
end
--  end helper

-- Credit: https://www.lexaloffle.com/bbs/?pid=94828


function moveParticles() 
    foreach(particles, moveParticle)
end

function moveParticle(part)
    part.x+=(part.dx*part.friction)
    part.y+=(part.dy*part.friction)
    if (part.frames >= part.max_frames) then del(particles, part) end
end

function spr_r(s,x,y,a,w,h)
    sw=(w or 1)*8
    sh=(h or 1)*8
    sx=(s%8)*8
    sy=flr(s/8)*8
    x0=flr(0.5*sw)
    y0=flr(0.5*sh)
    a=a/360
    sa=sin(a)
    ca=cos(a)
    for ix=0,sw-1 do
     for iy=0,sh-1 do
      dx=ix-x0
      dy=iy-y0
      xx=flr(dx*ca-dy*sa+x0)
      yy=flr(dx*sa+dy*ca+y0)
      if (xx>=0 and xx<sw and yy>=0 and yy<=sh) then
        if (sget(sx+xx,sy+yy) != 0) then
            pset(x+ix,y+iy,sget(sx+xx,sy+yy))
        end
      end
     end
    end
   end

p = Player:new{}
enemies = {}
gates = {}
particles = {}
fieldpus = {}



__gfx__
5d000000d6000000760000005d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d5d500006d6d000067670000d5d50000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5d5d5d00d6d6d600767676005d5d5d00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d5d5d5d56d6d6d6d67676767d5d5d5d5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5d5d5d5dd6d6d6d6767676765d5d5d5d000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d5d5d5006d6d6d0067676700d5d5d500000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
5d5d0000d6d60000767600005d5d0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
d50000006d00000067000000d5000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000440000004400005000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000430000504330050500000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000003005550333000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000300500033300000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000030000003330000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000003000000333000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000340000033400000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000440000004400000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
33333333444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
44444444444444440000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
__label__
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
10000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
00000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
10000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
10000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
10000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000000
11000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000010
11000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000010
11000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000010
11100000000000000000000000000000000000000000000000000000000001111111100000000000000000000000000000000000000000000000000000000110
11000000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000010
11100000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000110
11100000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000000110
11110000000000000000000000000000000000000000000000000000000001111111100000000000000000000000000000000000000000000000000000000110
11110000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000001110
11110000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000001110
11110000000000000000000000000000000000000000000000000000000001111111100000000000000000000000000000000000000000000000000000001110
11111000000000000000000000000000000000000000000000000000000011111111100000000000000000000000000000000000000000000000000000011110
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110
11111100000000000000000000000000000000000000000000000000000001111111100000000000000000000000000000000000000000000000000000111110
11111110000000000000000000000000000000000000000000000000000001111111000000000000000000000000000000000000000000000000000001111110
11111110000000000000000000000000000000000000000000000000000001111111100000000000000000000000000000000000000000000000000001111110
1111111100000000000000000000000000000005d500000000000000000001111111000000000000000000000000000000000000000000000000000011111110
01111111000000000000000000ddd6dd6dd6dd0d6d00000000000000000001111111100000000000000000000000000000000000000000000000000011111110
01111111000000000000000000d6666666666d0d6600000000000000000001111111000000000000000000000000000000000000000000000000000011111110
011111110000000000000000005dddd66dddd50d6d00000000000000000001111111100000000000000000000000000000000000000000000000000011111110
011111110000000000000000000000066500000d6d56dd6d00005d6dd6dd01111111000000000000000000000000000000000000000000000000000011111110
011111111000000000000000000000066500000d66d66666600566666666d1111111100000000000000000000000000000000000000000000000000011111110
001111111000000000000000000000066500000d6d155556650d6d55555661111111000000000000000000000000000000000000000000000000000111111100
001111111000000000000000000000066500000d6600000d650d6500005661111111100000000000000000000000000000000000000000000000001111111100
000111111100000000000000000000066500000d6d000006650665d66666d1111111000000000000000000000000000000000000000000000000000111111000
001111111100000000000000000000066500000d6d00000d650d6566666d011ddd511001d6666666615dd5000000000000000000000000000000001111111100
000111111100000555555555510000066500000d6600000d650d6d0000000116665100566666666661566d000000000000000000000555000000001111111000
00011111110005666666666666d000066500000d6d0000066505666666000116665110666666666661566d000000000000000000001666000000001111111000
000111111100566666666666666d00066500000d6d00000d6500d666660000111111056665111111100111000000000000000000001666000000001111110000
0000111111106666dddddddd666650000000000000000000000000000000011111111566d0000000000000000000000000000000001666000000011111110000
0000111111116660000000000d6660000011111110000000000111111111001555110566d0111111111111000001111111110001115666111111011111110000
0000111111156660000000000066610001666666666100000d6666666666111666511566d066666666666d0005666666666d0056666666666665011111110000
000011994111666300000033006d61000166666666661000dd6d6666666d3016665105d6d0d66d6666666d0056666db6666d00566d66666d66d5119941100000
00000499991566630303333333dbd30003db3bdb36d66335bdb6d6bdbd6b3336bd3333bdb3dbdbdbdbdbdd33d66bdbd6dbdb3056b6bd66b6bdb3349999110000
00000999bbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbbb999100000
000004999415dbd30330003003dbd33005dbddb3336db333d633333303333036665135663333333303366d30bdbdbdbdbdb33333333dbd333033399994000000
0000009945156d6055555535d666d00166d66666d066600b665000330000011d66530566d000303000566d03566d66666bd60030003666330301114991000000
0000001111156660d66666666666100d66666666d066600d665000000000001666511566d000000000566d00056666666666d000001666000001111111000000
0000001111156660d666666666610016665111111066600d665000000000011666510566d000000000566d000001111115666000001666000001111111000000
00000011111566605ddddddd550000166d0000000066600d665000000000001666510566d000000000566d000000000000666100001666000001111110000000
00000001111566600000000000000016660000000166600d66d111111111011666511566d000000000566d001111111115666100001666000001111110000000
00000000111566600000000000000006666666666666d005666666666666101666510566d000000000566d00d666666666666000001666000011111110000000
000000001115666000000000000000056666666666661000d66666666666111666511566d000000000566d00d666666666661000001666000011111100000000
000000001115666000000000000000001d66666666d0000005d666666666101666510566d000000000566d00d666666666d10000001666000111111100000000
00000000111111100000000000000000000000000000000000000000000001111111000000000000000000000000000000000000000000000111111100000000
00000000111111100000000000000000000000000000000000000000000000111111100000000000000000000000000000000000000000000111111100000000
00000000011111100000000000000000000000000000000000000000000001111111000000000000000000000000000000000000000000000111111000000000
00000000011111100000000000000000000000000000000000000000000000111111000000000000000000000000000000000000000000000111111000000000
00000000001111110000000000000000000000000000000000000000000001111111000000000000000000000000000000000000000000001111110000000000
00000000001111110000000000000000000000000000000000000000000000111111000000000000000000000000000000000000000000001111110000000000
00000000011111111000000000000000000000000000000000000000000001111111000000000000000000000000000000000000000000011111111000000000
00000000001111111000000000000000000000000000000000000000000000111111000000000000000000000000000000000000000000011111110000000000
00000000000111111000000000000000000000000000000000000000000001111111000000000000000000000000000000000000000000011111100000000000
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110
11111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111111110
00000000000011111100000000000000000000000000000000000000000000111111000000000000000000000000000000000000000000111111000000000000
00000000000001111110000000000000000000000000000000000000000001111111000000000000000000000000000000000000000001111110000000000000
00000000000001111100000000000000000000000000000000000000000000111111000000000000000000000000000000000000000000111110000000000000
00000000000001111110000000000000000000000000000000000000000000111111000000000000000000000000000000000000000001111110000000000000
00000000000001111110000000000000000000000000000000000000000000111111000000000000000000000000000000000000000001111110000000000000
00000000000000111111000000000000000000000000000000000000000000111111000000000000000000000000000000000000000011111100000000000000
00000000000000111111000000000000000000000000000000000000000000111111000000000000000000000000000000000000000011111100000000000000
00000000000000011111000000000000000000000000000000000000000000111111000000000000000000000000000000000000000011111000000000000000
00000000000000011111100000000000000000000000000000000000000000111111000000000000000000000000000000000000000011111000000000000000
00000000000000011111000000000000000000000000000000000000000000111111000000000000000000000000000000000000000111111000000000000000
00000000000000011111100000000000000000000000000000000000000000111111000000000000000000000000000000000000000011111000000000000000
00000000000000011111100000000000000000000000000000000000000005499451000000000000000000000000000000000000000111111000000000000000
00000000000000001111110000000000000000000000000000000000000049999994000000000000000000000000000000000000001111110000000000000000
00000000000000001111110000000000000000000000000000000000000599999999500000000000000000000000000000000000001111110000000000000000
00000000000000000111110000000000000000000000000000000000000499999999400000000000000000000000000000000000001111100000000000000000
00000000000000000111110000000000000000000000000000000000000999999999900000000000000000000000000000000000001111100000000000000000
00000000000000000111110000000000000000000000000000000000000999999999900000000000000000000000000000000000001111100000000000000000
00000000000000000111111000000000000000000000000000000000000499999999400000000000000000000000000000000000011111100000000000000000
00000000000000000111111000000000000000000000000000000000000599999999500000000000000000000000000000000000011111000000000000000000
00000000000000000011111100000000000000000000000000000000000049999994000000000000000000000000000000000000111111000000000000000000
00000000000000000001111100000000000000000000000000000000000005499451000000000000000000000000000000000000111110000000000000000000
0000000000000000001111110000000000000000000000000000014eed2000011111022888000000000000000000000000000000111111000000000000000000
00000000000000000001111100000000000000000000000000002eeeeee200011111288888820000000000000000000000000000111110000000000000000000
0000000000000000000111110000000000000000000000000001eeeeeeee20011112888888880000000000000000000000000000111110000000000000000000
0000000000000000000111110000000000000000000000000004eeeeeeeed0011118888888888000000000000000000000000000111110000000000000000000
000000000000000000001111100000000000000000000000000eeeeeeeeee0011118888888888000000000000000000000000001111100000000000000000000
000000000000000000001111110000000000000000000000000eeeeeeeeee0011118888888888000000000000000000000000011111100000000000000000000
111111111111111111111111111111111111111111111111111eeeeeeeeee1111118888888888111111111111111111111111111111111111111111111111110
1111111111111111111111111111111111111111111111111115eeeeeeee51111112888888882111111111111111111111111111111111111111111111111110
0111111111111111111111111111111111111111111111111111deeeeeed11111111288888821111111111111111111111111111111111111111111111111110
0000000000000000000001111100000000000000000000000000024eed2000011111022888000000000000000000000000000011111000000000000000000000
00000000000000000000001111000000000000000000000000000000000000011111000000000000000000000000000000000011110000000000000000000000
00000000000000000000001111100000000000000000000000000000000000011111000000000000000000000000000000000111110000000000000000000000
00000000000000000000001111100000000000000000000000000000000000011110000000000000000000000000000000000111110000000000000000000000
00000000000000000000001111110000000000000000000000000000000000011111000000000000000000000000000000001111110000000000000000000000
00000000000000000000001111100000000000000000000000000000000000011111000000000000000000000000000000000111110000000000000000000000
00000000000000000000000111110000000000000000000000000000000000011111000000000000000000000000000000001111100000000000000000000000
00000000000000000000000111100000000000000000000000000000000000011110000000000000000000000000000000001111000000000000000000000000
00000000000000000000000011110000000000000000000000000000000000011111000000000000000000000000000000001111000000000000000000000000
00000000000000000000000011111000000000000000000000000000000000011111000000000000000000000000000000011111000000000000000000000000
00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000

__sfx__
4a040500396513f6613f6712b6710e60109601006010c601086010660108601036010260100601245012450124501235012350100501005013250132501325013250132501325013250132501325013250132501
52040000376503e6503e650356501c65014650134500e4500b4500643004410034000040000400004000040000400004000040000400004000040000400004000040000400004000040000400004000040000400
ce060b00396533f6633d673396733865334653296531e653136530965302653006030060300603006030060300603006030060300603006030060300603006030060300603006030060300603006030060300603
000c01002b3302a300000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000
340400003f7333e7233e7233d7233c7233b7233772333723337232c7232972326723237231e7231972315733107330d7330a74308743077430574303743037430374302743017430074300743007430270300703
1d1800000c0700c0700c0700c0700c0700c0700e070110700c0700c0700c0700c0700c0700c0700e070110701407014070140701407014070140700e0700f0701107011070110701107011070110700f0700e070
0118000000563005030c6430050324600005630c6430050300563005030c6430050324600005630c6430050300563005030c6430050324600005630c6430050300563005030c6430050324600005630c64300503
931800003f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f6153f615
d10c00201f1251e1001f1251f1251f1251f1001f1251f1001f1251e1001f1251f1251f1251f1001f1251f1001f1251e1001f1251f1251f1251f1001f1251f1001f1251e1001f1251f1251f1251f1001f1251f100
931800003f6053f6053f6153f6053f6053f6053f6153f6053f6053f6053f6153f6053f6053f6053f6153f6053f6053f6053f6153f6053f6053f6053f6153f6053f6053f6053f6153f6053f6053f6053f6153f605
d10c00001d1251e1051d1251d1251d1251f1051d1251f1051d1251e1051d1251d1251d1251f1051d1251f1051d1251e1051d1251d1251d1251f1051d1251f1051d1251e1051d1251d1251d1251f1051d1251f105
2d1800001832018320183201832018320183201a3201d3201832018320183201832018320183201a3201d3202032020320203202032020320203201a3201b3201d3201d3201d3201d3201d3201d3201b3201a320
a410000008565005052e5050050500505005050050500505005050050500505005050050500505005050050500505005050050500505005050050500505005050050500505005050050500505005050050500505
__music__
00 45464708
00 45460908
00 05460908
01 05060708
00 05060708
00 05060708
00 05060708
00 0506070b
02 0506070b

